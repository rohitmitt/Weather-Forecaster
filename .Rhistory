knitr::opts_chunk$set(echo = TRUE)
library(forecast)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
# Split data into training (70%) and testing (30%) sets
trainIndex <- createDataPartition(data$MEAN_TEMP, p = 0.7, list = FALSE)
library(forecast)
library(caret)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
# Split data into training (70%) and testing (30%) sets
trainIndex <- createDataPartition(data$MEAN_TEMP, p = 0.7, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
View(trainData)
View(trainData)
View(testData)
library(forecast)
library(caret)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
# Split data into training (70%) and testing (30%) sets
set.seed(123)
trainIndex <- createDataPartition(data$MEAN_TEMP, p = 0.7, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
View(trainData)
View(trainData)
View(testData)
library(forecast)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
trainData <- head(data, round(length(data) * 0.7))
h <- length(data) - length(trainData)
test <- tail(data, h)
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
library(forecast)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
trainData <- head(data, round(length(data) * 0.7))
h <- length(data) - length(trainData)
testData <- tail(data, h)
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
View(testData)
View(testData)
View(trainData)
View(trainData)
View(data)
View(data)
library(forecast)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
trainData <- head(data, round(length(data) * 0.7))
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
library(forecast)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
# Calculate the number of rows for training and testing
n_train <- round(0.8 * nrow(data))
n_test <- nrow(data) - n_train
# Split data into training and testing sets sequentially
trainData <- data[1:n_train, ]
testData <- data[(n_train + 1):nrow(data), ]
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
View(trainData)
View(testData)
View(trainData)
library(forecast)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
# Calculate the number of rows for training and testing
n_train <- round(0.8 * nrow(data))
n_test <- nrow(data) - n_train
# Split data into training and testing sets sequentially
trainData <- data[1:n_train, ]
testData <- data[(n_train + 1):nrow(data), ]
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
forecast::tsdisplay(train_ts)
library(forecast)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
# Calculate the number of rows for training and testing
n_train <- round(0.8 * nrow(data))
n_test <- nrow(data) - n_train
# Split data into training and testing sets sequentially
trainData <- data[1:n_train, ]
testData <- data[(n_train + 1):nrow(data), ]
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
forecast::tsdisplay(train_ts, lag.max = 50)
library(forecast)
library(fpp3)
library(forecast)
library(fpp3)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
# Calculate the number of rows for training and testing
n_train <- round(0.8 * nrow(data))
n_test <- nrow(data) - n_train
# Split data into training and testing sets sequentially
trainData <- data[1:n_train, ]
testData <- data[(n_train + 1):nrow(data), ]
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
model(STL(train_ts ~ season(window = "periodic")))
library(forecast)
library(fpp3)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
# Calculate the number of rows for training and testing
n_train <- round(0.8 * nrow(data))
n_test <- nrow(data) - n_train
# Split data into training and testing sets sequentially
trainData <- data[1:n_train, ]
testData <- data[(n_train + 1):nrow(data), ]
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
# Perform seasonal decomposition
decomposition <- stl(train_ts, s.window = "periodic")
# Extract components
components <- components(decomposition)
library(forecast)
library(fpp3)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
# Calculate the number of rows for training and testing
n_train <- round(0.8 * nrow(data))
n_test <- nrow(data) - n_train
# Split data into training and testing sets sequentially
trainData <- data[1:n_train, ]
testData <- data[(n_train + 1):nrow(data), ]
# Create time series objects for training and testing sets
train_ts <- ts(trainData$MEAN_TEMP, start = min(trainData$Date), frequency = 365)
test_ts <- ts(testData$MEAN_TEMP, start = min(testData$Date), frequency = 365)
# Perform seasonal decomposition
decomposition <- stl(train_ts, s.window = "periodic")
# Extract components
trend <- decomposition$time.series[, "trend"]
seasonal <- decomposition$time.series[, "seasonal"]
remainder <- decomposition$time.series[, "remainder"]
# Plot the components
autoplot(trend) +
autolayer(seasonal, series = "Seasonal") +
autolayer(remainder, series = "Remainder") +
labs(title = "STL Decomposition of Training Time Series")
library(forecast)
library(fpp2)
library(forecast)
library(tseries)
library(urca)
# Read residual data from CSV file
data <- read.csv('mean_temp.csv', header = TRUE)
# Convert date column to Date format
data$Date <- as.Date(data$YYYYMMDD, format = "%Y-%m-%d")
autoplot(data)
library(forecast)
library(fpp2)
library(forecast)
library(fpp2)
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(fpp2)
